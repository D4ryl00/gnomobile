syntax = "proto3";

package gomobile.v1;

option go_package = "github.com/gnoland/gnomobile/service/gnomobiletypes";
option java_package = "land.gno.gnomobile";

// GnomobileService is the service to interact with the Gno blockchain
service GnomobileService {
	// Set the connection addresse for the remote node. If you don't call this, the default is
	// "127.0.0.1:26657"
	rpc SetRemote (SetRemote.Request) returns (SetRemote.Reply);

	// Set the chain ID for the remote node. If you don't call this, the default is "dev"
	rpc SetChainID (SetChainID.Request) returns (SetChainID.Reply);

	// Set the nameOrBech32 for the account in the keybase, used for later operations
	rpc SetNameOrBech32 (SetNameOrBech32.Request) returns (SetNameOrBech32.Reply);

	// Set the password for the account in the keybase, used for later operations
	rpc SetPassword (SetPassword.Request) returns (SetPassword.Reply);

	// Get the keys informations in the keybase
	rpc ListKeyInfo (ListKeyInfo.Request) returns (ListKeyInfo.Reply);

	// Create a new account the keybase using the name an password specified by SetAccount
	rpc CreateAccount (CreateAccount.Request) returns (CreateAccount.Reply);

	// SelectAccount selects the account to use for later operations
	rpc SelectAccount (SelectAccount.Request) returns (SelectAccount.Reply);

	// Make an ABCI query to the remote node.
	rpc Query (Query.Request) returns (Query.Reply);

	// Call a specific realm function.
	rpc Call (Call.Request) returns (Call.Reply);
}

message SetRemote {
	message Request {
		string remote = 1;
	}
	message Reply {}
}

message SetChainID {
	message Request {
		string chainID = 1;
	}
	message Reply {}
}

message SetNameOrBech32 {
	message Request {
		string nameOrBech32 = 1;
	}
	message Reply {}
}

message SetPassword {
	message Request {
		string password = 1;
	}
	message Reply {}
}

enum KeyType {
	TypeLocal = 0;
	TypeLedger = 1;
	TypeOffline = 2;
	TypeMulti = 3;
}

message KeyInfo {
	KeyType type = 1;
	string name = 2;
	bytes pubKey = 3;
	bytes address = 4;
	bytes path = 5;
}

message ListKeyInfo {
	message Request {}
	message Reply {
  		repeated KeyInfo keys = 1;
  }
}

message CreateAccount {
	message Request {
		string nameOrBech32 = 1;
		string mnemonic = 2;
		string bip39Passwd = 3;
		string password = 4;
		uint32 account = 5;
		uint32 index = 6;
	}
	message Reply {
		KeyInfo key = 1;
	}
}

message SelectAccount {
	message Request {
		string nameOrBech32 = 1;
	}
	message Reply {
		KeyInfo key = 1;
	}
}

message Query {
	message Request {
		string path = 1; // Example: "vm/qrender"
		string data = 2; // Example: "gno.land/r/demo/boards\ntestboard"
	}
	message Reply {
		bytes result = 1;
  }
}

message Call {
	message Request {
		string packagePath = 1; // Example: "gno.land/r/demo/boards"
		string fnc = 2; // Example: "CreateReply"
		repeated string args = 3; // list of arguments specific to the function
		string gasFee = 4;
		int64 gasWanted = 5;
		string password = 6;
	}
	message Reply {
		bytes result = 1;
  }
}

enum ErrCode {
  //----------------
  // Special errors
  //----------------

  Undefined = 0; // default value, should never be set manually

  TODO = 1;              // indicates that you plan to create an error later
  ErrNotImplemented = 2; // indicates that a method is not implemented yet
  ErrInternal = 3; // indicates an unknown error (without Code), i.e. in gRPC

  //----------------
  // Generic errors
  //----------------

  // Parameters and I/O errors

  ErrInvalidInput = 100;
  ErrBridgeInterrupted = 101;
  ErrMissingInput = 102;
  ErrSerialization = 103;
  ErrDeserialization = 104;
  ErrCryptoKeyTypeUnknown = 105;
  ErrCryptoKeyNotFound = 106;
}

message ErrDetails { repeated ErrCode codes = 1; }
