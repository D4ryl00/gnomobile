syntax = "proto3";

package gomobile.v1;

option go_package = "github.com/gnoland/gnomobile/framework/gnomobiletypes";
option java_package = "land.gno.gnomobile";

// GnomobileService is the service to interact with the Gno blockchain
service GnomobileService {
	// Set the connection info for the remote node. If you don't call this, the default is
	// remote = "127.0.0.1:26657" and chainID = "dev"
	rpc SetRemote (SetRemote.Request) returns (SetRemote.Reply);

	// InitKeyBaseFromDir initializes a keybase in the given subdirectory of the app's root directory.
	// If the keybase already exists then this opens it, otherwise this creates a new empty keybase.
	rpc InitKeyBaseFromDir (InitKeyBaseFromDir.Request) returns (InitKeyBaseFromDir.Reply);

	// Set the name and password for the account in the keybase, used for later operations
	rpc SetAccount (SetAccount.Request) returns (SetAccount.Reply);

	// Get the count of keys in the keybase that was specified by InitKeyBaseFromDir
	rpc GetKeyCount (GetKeyCount.Request) returns (GetKeyCount.Reply);

	// Create a new account the keybase that was specified by InitKeyBaseFromDir, using
	// the name an password specified by SetAccount
	rpc CreateAccount (CreateAccount.Request) returns (CreateAccount.Reply);

	// Make an ABCI query to the remote node.
	rpc Query (Query.Request) returns (Query.Reply);

	// Call a specific realm function.
	rpc Call (Call.Request) returns (Call.Reply);
}

message SetRemote {
	message Request {
		string remote = 1;
		string chainID = 2;
	}
	message Reply {}
}

message InitKeyBaseFromDir {
	message Request {
		string subDir = 1;
	}
	message Reply {
    string error = 1;
  }
}

message SetAccount {
	message Request {
		string nameOrBech32 = 1;
		string password = 2;
	}
	message Reply {}
}

message GetKeyCount {
	message Request {}
	message Reply {
    int64 keyCount = 1;
    string error = 2;
  }
}

message CreateAccount {
	message Request {
		string mnemonic = 1;
		string string = 2;
		int64 account = 3;
		int64 index = 4;
	}
	message Reply {
    string error = 1;
  }
}

message Query {
	message Request {
		string path = 1; // Example: "vm/qrender"
		string data = 2; // Example: "gno.land/r/demo/boards\ntestboard"
	}
	message Reply {
    bytes result = 1;
    string error = 2;
  }
}

message Call {
	message Request {
		string packagePath = 1; // Example: "gno.land/r/demo/boards"
		string fnc = 2; // Example: "CreateReply"
		repeated string args = 3; // list of arguments specific to the function
		string gasFee = 4;
		int64 gasWanted = 5;
	}
	message Reply {
    bytes result = 1;
    string error = 2;
  }
}

enum ErrCode {
  //----------------
  // Special errors
  //----------------

  Undefined = 0; // default value, should never be set manually

  TODO = 1;              // indicates that you plan to create an error later
  ErrNotImplemented = 2; // indicates that a method is not implemented yet
  ErrInternal = 3; // indicates an unknown error (without Code), i.e. in gRPC

  //----------------
  // Generic errors
  //----------------

  // Parameters and I/O errors

  ErrInvalidInput = 100;
  ErrBridgeInterrupted = 101;
  ErrMissingInput = 102;
  ErrSerialization = 103;
  ErrDeserialization = 104;
}

message ErrDetails { repeated ErrCode codes = 1; }
