syntax = "proto3";

package gomobile.v1;

option go_package = "github.com/gnoland/gnomobile/framework/gnomobiletypes";

// GnomobileService is the service to interact with the Gno blockchain
service GnomobileService {
	// Set the connection info for the remote node. If you don't call this, the default is
	// remote = "127.0.0.1:26657" and chainID = "dev" .
	rpc SetRemote (SetRemote.Request) returns (SetRemote.Reply);

	// NewKeyBaseFromDir initializes a keybase in the given subdirectory of the app's root directory.
	// If the keybase already exists then this opens it, otherwise this creates a new empty keybase.
	rpc SetKeyBaseFromDir (SetKeyBaseFromDir.Request) returns (SetKeyBaseFromDir.Reply);

	// Set the name and password for the account in the keybase, used for later operations.
	rpc SetAccount (SetAccount.Request) returns (SetAccount.Reply);

	// Get the count of keys in the keybase that was specified by SetKeyBaseFromDir.
	rpc GetKeyCount (GetKeyCount.Request) returns (GetKeyCount.Reply);

	// Create a new account the keybase that was specified by SetKeyBaseFromDir, using
	// the name an password specified by SetAccount.
	rpc CreateAccount (CreateAccount.Request) returns (CreateAccount.Reply);

	// CreateReply creates a reply to a message in the Gnoboard realms
	rpc CreateReply (CreateReply.Request) returns (CreateReply.Reply);
}

message SetRemote {
	message Request {
		string remote = 1;
		string chainID = 2;
	}
	message Reply {}
}

message SetKeyBaseFromDir {
	message Request {
		string subDir = 1;
	}
	message Reply {
    string error = 1;
  }
}

message SetAccount {
	message Request {
		string nameOrBech32 = 1;
		string password = 2;
	}
	message Reply {}
}

message GetKeyCount {
	message Request {}
	message Reply {
    int64 keyCount = 1;
    string error = 2;
  }
}

message CreateAccount {
	message Request {
		string mnemonic = 1;
		string string = 2;
		int64 account = 3;
		int64 index = 4;
	}
	message Reply {
    string error = 1;
  }
}

// GasInfo contains the operation's gas information such as gas fee and gas wanted.
message GasInfo {
		string gasFee = 1;
		int64 gasWanted = 2;
}

message CreateReply {
	message Request {
		string boardId = 1;
		string threadId = 2;
		string postId = 3;
		string message = 4;
		GasInfo gasInfo = 5;
	}
	message Reply {
    string error = 1;
  }
}

enum ErrCode {
  //----------------
  // Special errors
  //----------------

  Undefined = 0; // default value, should never be set manually

  TODO = 1;              // indicates that you plan to create an error later
  ErrNotImplemented = 2; // indicates that a method is not implemented yet
  ErrInternal = 3; // indicates an unknown error (without Code), i.e. in gRPC

  //----------------
  // Generic errors
  //----------------

  // Parameters and I/O errors

  ErrInvalidInput = 100;
  ErrBridgeInterrupted = 101;
  ErrMissingInput = 102;
  ErrSerialization = 103;
  ErrDeserialization = 104;
}

message ErrDetails { repeated ErrCode codes = 1; }
