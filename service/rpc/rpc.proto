syntax = "proto3";

package land.gno.gnomobile.v1;

option go_package = "github.com/gnolang/gnomobile/service/rpc";
option objc_class_prefix = "RTG";

import "gnomobiletypes.proto";

// GnomobileService is the service to interact with the Gno blockchain
service GnomobileService {
  // Set the connection addresse for the remote node. If you don't call this,
  // the default is "127.0.0.1:26657"
  rpc SetRemote(SetRemote_Request) returns (SetRemote_Reply);

  // Set the chain ID for the remote node. If you don't call this, the default
  // is "dev"
  rpc SetChainID(SetChainID_Request) returns (SetChainID_Reply);

  // Set the nameOrBech32 for the account in the keybase, used for later
  // operations
  rpc SetNameOrBech32(SetNameOrBech32_Request) returns (SetNameOrBech32_Reply);

  // Set the password for the account in the keybase, used for later operations
  rpc SetPassword(SetPassword_Request) returns (SetPassword_Reply);

  // Generate a recovery phrase of BIP39 mnemonic words using entropy from the crypto library
  // random number generator. This can be used as the mnemonic in CreateAccount.
  rpc GenerateRecoveryPhrase(GenerateRecoveryPhrase_Request) returns (GenerateRecoveryPhrase_Reply);

  // Get the keys informations in the keybase
  rpc ListKeyInfo(ListKeyInfo.Request) returns (ListKeyInfo.Reply);

  // Create a new account the keybase using the name an password specified by
  // SetAccount
  rpc CreateAccount(CreateAccount.Request) returns (CreateAccount.Reply);

  // SelectAccount selects the active account to use for later operations
  rpc SelectAccount(SelectAccount.Request) returns (SelectAccount.Reply);

  // GetActiveAccount gets the active account which was set by SelectAccount.
  // If there is no active account, then return ErrNoActiveAccount.
  // (To check if there is an active account, use ListKeyInfo and check the length of the result.)
  rpc GetActiveAccount(GetActiveAccount.Request) returns (GetActiveAccount.Reply);

  // Make an ABCI query to the remote node.
  rpc Query(Query_Request) returns (Query_Reply);

  // Call a specific realm function.
  rpc Call(Call_Request) returns (Call_Reply);
}

enum KeyType {
  TypeLocal = 0;
  TypeLedger = 1;
  TypeOffline = 2;
  TypeMulti = 3;
}

message KeyInfo {
  KeyType type = 1;
  string name = 2;
  bytes pubKey = 3;
  bytes address = 4;
}

message ListKeyInfo {
  message Request {}
  message Reply { repeated KeyInfo keys = 1; }
}

message CreateAccount {
  message Request {
    string nameOrBech32 = 1;
    string mnemonic = 2;
    string bip39Passwd = 3;
    string password = 4;
    uint32 account = 5;
    uint32 index = 6;
  }
  message Reply { KeyInfo key = 1; }
}

message SelectAccount {
  message Request { string nameOrBech32 = 1; }
  message Reply { KeyInfo key = 1; }
}

message GetActiveAccount {
  message Request {}
  message Reply { KeyInfo key = 1; }
}

enum ErrCode {
  //----------------
  // Special errors
  //----------------

  Undefined = 0; // default value, should never be set manually

  TODO = 1;              // indicates that you plan to create an error later
  ErrNotImplemented = 2; // indicates that a method is not implemented yet
  ErrInternal = 3; // indicates an unknown error (without Code), i.e. in gRPC

  //----------------
  // Generic errors
  //----------------

  // Parameters and I/O errors

  ErrInvalidInput = 100;
  ErrBridgeInterrupted = 101;
  ErrMissingInput = 102;
  ErrSerialization = 103;
  ErrDeserialization = 104;
  ErrCryptoKeyTypeUnknown = 105;
  ErrCryptoKeyNotFound = 106;
  ErrNoActiveAccount = 107;
  ErrRunGRPCServer = 108;
}

message ErrDetails { repeated ErrCode codes = 1; }
