// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rpc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The ErrCode enum defines errors for gRPC API functions. These are converted
/// from the Go error types returned by gnoclient.
public enum Land_Gno_Gnomobile_V1_ErrCode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Undefined is the default value. It should never be set manually
  case undefined // = 0

  /// TODO indicates that you plan to create an error later
  case todo // = 1

  /// ErrNotImplemented indicates that a method is not implemented yet
  case errNotImplemented // = 2

  /// ErrInternal indicates an unknown error (without Code), i.e. in gRPC
  case errInternal // = 3
  case errInvalidInput // = 100
  case errBridgeInterrupted // = 101
  case errMissingInput // = 102
  case errSerialization // = 103
  case errDeserialization // = 104
  case errInitService // = 105
  case errCryptoKeyTypeUnknown // = 150

  /// ErrCryptoKeyNotFound indicates that the doesn't exist in the keybase
  case errCryptoKeyNotFound // = 151

  /// ErrNoActiveAccount indicates that no active account has been set with SelectAccount
  case errNoActiveAccount // = 152
  case errRunGrpcserver // = 153

  /// ErrDecryptionFailed indicates a decryption failure including a wrong password
  case errDecryptionFailed // = 154
  case errTxDecode // = 200
  case errInvalidSequence // = 201
  case errUnauthorized // = 202

  /// ErrInsufficientFunds indicates that there are insufficient funds to pay for fees
  case errInsufficientFunds // = 203

  /// ErrUnknownRequest indicates that the path of a realm function call is unrecognized
  case errUnknownRequest // = 204

  /// ErrInvalidAddress indicates that an account address is blank or the bech32 can't be decoded
  case errInvalidAddress // = 205

  /// ErrUnknownAddress indicates that the address is unknown on the blockchain
  case errUnknownAddress // = 206

  /// ErrInvalidPubKey indicates that the public key was not found or has an invalid algorithm or format
  case errInvalidPubKey // = 207

  /// ErrInsufficientCoins indicates that the transaction has insufficient account funds to send
  case errInsufficientCoins // = 208

  /// ErrInvalidCoins indicates that the transaction Coins are not sorted, or don't have a
  /// positive amount, or the coin Denom contains upper case characters
  case errInvalidCoins // = 209

  /// ErrInvalidGasWanted indicates that the transaction gas wanted is too large or otherwise invalid
  case errInvalidGasWanted // = 210

  /// ErrOutOfGas indicates that the transaction doesn't have enough gas
  case errOutOfGas // = 211

  /// ErrMemoTooLarge indicates that the transaction memo is too large
  case errMemoTooLarge // = 212

  /// ErrInsufficientFee indicates that the gas fee is insufficient
  case errInsufficientFee // = 213

  /// ErrTooManySignatures indicates that the transaction has too many signatures
  case errTooManySignatures // = 214

  /// ErrNoSignatures indicates that the transaction has no signatures
  case errNoSignatures // = 215

  /// ErrGasOverflow that an action results in a gas consumption unsigned integer overflow
  case errGasOverflow // = 216
  case UNRECOGNIZED(Int)

  public init() {
    self = .undefined
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .todo
    case 2: self = .errNotImplemented
    case 3: self = .errInternal
    case 100: self = .errInvalidInput
    case 101: self = .errBridgeInterrupted
    case 102: self = .errMissingInput
    case 103: self = .errSerialization
    case 104: self = .errDeserialization
    case 105: self = .errInitService
    case 150: self = .errCryptoKeyTypeUnknown
    case 151: self = .errCryptoKeyNotFound
    case 152: self = .errNoActiveAccount
    case 153: self = .errRunGrpcserver
    case 154: self = .errDecryptionFailed
    case 200: self = .errTxDecode
    case 201: self = .errInvalidSequence
    case 202: self = .errUnauthorized
    case 203: self = .errInsufficientFunds
    case 204: self = .errUnknownRequest
    case 205: self = .errInvalidAddress
    case 206: self = .errUnknownAddress
    case 207: self = .errInvalidPubKey
    case 208: self = .errInsufficientCoins
    case 209: self = .errInvalidCoins
    case 210: self = .errInvalidGasWanted
    case 211: self = .errOutOfGas
    case 212: self = .errMemoTooLarge
    case 213: self = .errInsufficientFee
    case 214: self = .errTooManySignatures
    case 215: self = .errNoSignatures
    case 216: self = .errGasOverflow
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .todo: return 1
    case .errNotImplemented: return 2
    case .errInternal: return 3
    case .errInvalidInput: return 100
    case .errBridgeInterrupted: return 101
    case .errMissingInput: return 102
    case .errSerialization: return 103
    case .errDeserialization: return 104
    case .errInitService: return 105
    case .errCryptoKeyTypeUnknown: return 150
    case .errCryptoKeyNotFound: return 151
    case .errNoActiveAccount: return 152
    case .errRunGrpcserver: return 153
    case .errDecryptionFailed: return 154
    case .errTxDecode: return 200
    case .errInvalidSequence: return 201
    case .errUnauthorized: return 202
    case .errInsufficientFunds: return 203
    case .errUnknownRequest: return 204
    case .errInvalidAddress: return 205
    case .errUnknownAddress: return 206
    case .errInvalidPubKey: return 207
    case .errInsufficientCoins: return 208
    case .errInvalidCoins: return 209
    case .errInvalidGasWanted: return 210
    case .errOutOfGas: return 211
    case .errMemoTooLarge: return 212
    case .errInsufficientFee: return 213
    case .errTooManySignatures: return 214
    case .errNoSignatures: return 215
    case .errGasOverflow: return 216
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Land_Gno_Gnomobile_V1_ErrCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Land_Gno_Gnomobile_V1_ErrCode] = [
    .undefined,
    .todo,
    .errNotImplemented,
    .errInternal,
    .errInvalidInput,
    .errBridgeInterrupted,
    .errMissingInput,
    .errSerialization,
    .errDeserialization,
    .errInitService,
    .errCryptoKeyTypeUnknown,
    .errCryptoKeyNotFound,
    .errNoActiveAccount,
    .errRunGrpcserver,
    .errDecryptionFailed,
    .errTxDecode,
    .errInvalidSequence,
    .errUnauthorized,
    .errInsufficientFunds,
    .errUnknownRequest,
    .errInvalidAddress,
    .errUnknownAddress,
    .errInvalidPubKey,
    .errInsufficientCoins,
    .errInvalidCoins,
    .errInvalidGasWanted,
    .errOutOfGas,
    .errMemoTooLarge,
    .errInsufficientFee,
    .errTooManySignatures,
    .errNoSignatures,
    .errGasOverflow,
  ]
}

#endif  // swift(>=4.2)

public struct Land_Gno_Gnomobile_V1_ErrDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var codes: [Land_Gno_Gnomobile_V1_ErrCode] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Land_Gno_Gnomobile_V1_ErrCode: @unchecked Sendable {}
extension Land_Gno_Gnomobile_V1_ErrDetails: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "land.gno.gnomobile.v1"

extension Land_Gno_Gnomobile_V1_ErrCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Undefined"),
    1: .same(proto: "TODO"),
    2: .same(proto: "ErrNotImplemented"),
    3: .same(proto: "ErrInternal"),
    100: .same(proto: "ErrInvalidInput"),
    101: .same(proto: "ErrBridgeInterrupted"),
    102: .same(proto: "ErrMissingInput"),
    103: .same(proto: "ErrSerialization"),
    104: .same(proto: "ErrDeserialization"),
    105: .same(proto: "ErrInitService"),
    150: .same(proto: "ErrCryptoKeyTypeUnknown"),
    151: .same(proto: "ErrCryptoKeyNotFound"),
    152: .same(proto: "ErrNoActiveAccount"),
    153: .same(proto: "ErrRunGRPCServer"),
    154: .same(proto: "ErrDecryptionFailed"),
    200: .same(proto: "ErrTxDecode"),
    201: .same(proto: "ErrInvalidSequence"),
    202: .same(proto: "ErrUnauthorized"),
    203: .same(proto: "ErrInsufficientFunds"),
    204: .same(proto: "ErrUnknownRequest"),
    205: .same(proto: "ErrInvalidAddress"),
    206: .same(proto: "ErrUnknownAddress"),
    207: .same(proto: "ErrInvalidPubKey"),
    208: .same(proto: "ErrInsufficientCoins"),
    209: .same(proto: "ErrInvalidCoins"),
    210: .same(proto: "ErrInvalidGasWanted"),
    211: .same(proto: "ErrOutOfGas"),
    212: .same(proto: "ErrMemoTooLarge"),
    213: .same(proto: "ErrInsufficientFee"),
    214: .same(proto: "ErrTooManySignatures"),
    215: .same(proto: "ErrNoSignatures"),
    216: .same(proto: "ErrGasOverflow"),
  ]
}

extension Land_Gno_Gnomobile_V1_ErrDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErrDetails"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "codes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.codes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.codes.isEmpty {
      try visitor.visitPackedEnumField(value: self.codes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Land_Gno_Gnomobile_V1_ErrDetails, rhs: Land_Gno_Gnomobile_V1_ErrDetails) -> Bool {
    if lhs.codes != rhs.codes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
