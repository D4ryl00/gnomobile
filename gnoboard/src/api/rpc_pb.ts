// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file rpc.proto (package land.gno.gnomobile.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum land.gno.gnomobile.v1.KeyType
 */
export enum KeyType {
  /**
   * @generated from enum value: TypeLocal = 0;
   */
  TypeLocal = 0,

  /**
   * @generated from enum value: TypeLedger = 1;
   */
  TypeLedger = 1,

  /**
   * @generated from enum value: TypeOffline = 2;
   */
  TypeOffline = 2,

  /**
   * @generated from enum value: TypeMulti = 3;
   */
  TypeMulti = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(KeyType)
proto3.util.setEnumType(KeyType, "land.gno.gnomobile.v1.KeyType", [
  { no: 0, name: "TypeLocal" },
  { no: 1, name: "TypeLedger" },
  { no: 2, name: "TypeOffline" },
  { no: 3, name: "TypeMulti" },
]);

/**
 * ----------------
 * Special errors
 * ----------------
 *
 * @generated from enum land.gno.gnomobile.v1.ErrCode
 */
export enum ErrCode {
  /**
   * default value, should never be set manually
   *
   * @generated from enum value: Undefined = 0;
   */
  Undefined = 0,

  /**
   * indicates that you plan to create an error later
   *
   * @generated from enum value: TODO = 1;
   */
  TODO = 1,

  /**
   * indicates that a method is not implemented yet
   *
   * @generated from enum value: ErrNotImplemented = 2;
   */
  ErrNotImplemented = 2,

  /**
   * indicates an unknown error (without Code), i.e. in gRPC
   *
   * @generated from enum value: ErrInternal = 3;
   */
  ErrInternal = 3,

  /**
   * @generated from enum value: ErrInvalidInput = 100;
   */
  ErrInvalidInput = 100,

  /**
   * @generated from enum value: ErrBridgeInterrupted = 101;
   */
  ErrBridgeInterrupted = 101,

  /**
   * @generated from enum value: ErrMissingInput = 102;
   */
  ErrMissingInput = 102,

  /**
   * @generated from enum value: ErrSerialization = 103;
   */
  ErrSerialization = 103,

  /**
   * @generated from enum value: ErrDeserialization = 104;
   */
  ErrDeserialization = 104,

  /**
   * @generated from enum value: ErrCryptoKeyTypeUnknown = 105;
   */
  ErrCryptoKeyTypeUnknown = 105,

  /**
   * @generated from enum value: ErrCryptoKeyNotFound = 106;
   */
  ErrCryptoKeyNotFound = 106,

  /**
   * @generated from enum value: ErrNoActiveAccount = 107;
   */
  ErrNoActiveAccount = 107,

  /**
   * @generated from enum value: ErrRunGRPCServer = 108;
   */
  ErrRunGRPCServer = 108,
}
// Retrieve enum metadata with: proto3.getEnumType(ErrCode)
proto3.util.setEnumType(ErrCode, "land.gno.gnomobile.v1.ErrCode", [
  { no: 0, name: "Undefined" },
  { no: 1, name: "TODO" },
  { no: 2, name: "ErrNotImplemented" },
  { no: 3, name: "ErrInternal" },
  { no: 100, name: "ErrInvalidInput" },
  { no: 101, name: "ErrBridgeInterrupted" },
  { no: 102, name: "ErrMissingInput" },
  { no: 103, name: "ErrSerialization" },
  { no: 104, name: "ErrDeserialization" },
  { no: 105, name: "ErrCryptoKeyTypeUnknown" },
  { no: 106, name: "ErrCryptoKeyNotFound" },
  { no: 107, name: "ErrNoActiveAccount" },
  { no: 108, name: "ErrRunGRPCServer" },
]);

/**
 * @generated from message land.gno.gnomobile.v1.KeyInfo
 */
export class KeyInfo extends Message<KeyInfo> {
  /**
   * @generated from field: land.gno.gnomobile.v1.KeyType type = 1;
   */
  type = KeyType.TypeLocal;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: bytes pubKey = 3;
   */
  pubKey = new Uint8Array(0);

  /**
   * @generated from field: bytes address = 4;
   */
  address = new Uint8Array(0);

  constructor(data?: PartialMessage<KeyInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnomobile.v1.KeyInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(KeyType) },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pubKey", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyInfo {
    return new KeyInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyInfo {
    return new KeyInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyInfo {
    return new KeyInfo().fromJsonString(jsonString, options);
  }

  static equals(a: KeyInfo | PlainMessage<KeyInfo> | undefined, b: KeyInfo | PlainMessage<KeyInfo> | undefined): boolean {
    return proto3.util.equals(KeyInfo, a, b);
  }
}

/**
 * @generated from message land.gno.gnomobile.v1.ListKeyInfo
 */
export class ListKeyInfo extends Message<ListKeyInfo> {
  constructor(data?: PartialMessage<ListKeyInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnomobile.v1.ListKeyInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKeyInfo {
    return new ListKeyInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKeyInfo {
    return new ListKeyInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKeyInfo {
    return new ListKeyInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ListKeyInfo | PlainMessage<ListKeyInfo> | undefined, b: ListKeyInfo | PlainMessage<ListKeyInfo> | undefined): boolean {
    return proto3.util.equals(ListKeyInfo, a, b);
  }
}

/**
 * @generated from message land.gno.gnomobile.v1.ListKeyInfo.Request
 */
export class ListKeyInfo_Request extends Message<ListKeyInfo_Request> {
  constructor(data?: PartialMessage<ListKeyInfo_Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnomobile.v1.ListKeyInfo.Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKeyInfo_Request {
    return new ListKeyInfo_Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKeyInfo_Request {
    return new ListKeyInfo_Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKeyInfo_Request {
    return new ListKeyInfo_Request().fromJsonString(jsonString, options);
  }

  static equals(a: ListKeyInfo_Request | PlainMessage<ListKeyInfo_Request> | undefined, b: ListKeyInfo_Request | PlainMessage<ListKeyInfo_Request> | undefined): boolean {
    return proto3.util.equals(ListKeyInfo_Request, a, b);
  }
}

/**
 * @generated from message land.gno.gnomobile.v1.ListKeyInfo.Reply
 */
export class ListKeyInfo_Reply extends Message<ListKeyInfo_Reply> {
  /**
   * @generated from field: repeated land.gno.gnomobile.v1.KeyInfo keys = 1;
   */
  keys: KeyInfo[] = [];

  constructor(data?: PartialMessage<ListKeyInfo_Reply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnomobile.v1.ListKeyInfo.Reply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "message", T: KeyInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKeyInfo_Reply {
    return new ListKeyInfo_Reply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKeyInfo_Reply {
    return new ListKeyInfo_Reply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKeyInfo_Reply {
    return new ListKeyInfo_Reply().fromJsonString(jsonString, options);
  }

  static equals(a: ListKeyInfo_Reply | PlainMessage<ListKeyInfo_Reply> | undefined, b: ListKeyInfo_Reply | PlainMessage<ListKeyInfo_Reply> | undefined): boolean {
    return proto3.util.equals(ListKeyInfo_Reply, a, b);
  }
}

/**
 * @generated from message land.gno.gnomobile.v1.CreateAccount
 */
export class CreateAccount extends Message<CreateAccount> {
  constructor(data?: PartialMessage<CreateAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnomobile.v1.CreateAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccount {
    return new CreateAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccount {
    return new CreateAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccount {
    return new CreateAccount().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAccount | PlainMessage<CreateAccount> | undefined, b: CreateAccount | PlainMessage<CreateAccount> | undefined): boolean {
    return proto3.util.equals(CreateAccount, a, b);
  }
}

/**
 * @generated from message land.gno.gnomobile.v1.CreateAccount.Request
 */
export class CreateAccount_Request extends Message<CreateAccount_Request> {
  /**
   * @generated from field: string nameOrBech32 = 1;
   */
  nameOrBech32 = "";

  /**
   * @generated from field: string mnemonic = 2;
   */
  mnemonic = "";

  /**
   * @generated from field: string bip39Passwd = 3;
   */
  bip39Passwd = "";

  /**
   * @generated from field: string password = 4;
   */
  password = "";

  /**
   * @generated from field: uint32 account = 5;
   */
  account = 0;

  /**
   * @generated from field: uint32 index = 6;
   */
  index = 0;

  constructor(data?: PartialMessage<CreateAccount_Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnomobile.v1.CreateAccount.Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nameOrBech32", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mnemonic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bip39Passwd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "account", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccount_Request {
    return new CreateAccount_Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccount_Request {
    return new CreateAccount_Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccount_Request {
    return new CreateAccount_Request().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAccount_Request | PlainMessage<CreateAccount_Request> | undefined, b: CreateAccount_Request | PlainMessage<CreateAccount_Request> | undefined): boolean {
    return proto3.util.equals(CreateAccount_Request, a, b);
  }
}

/**
 * @generated from message land.gno.gnomobile.v1.CreateAccount.Reply
 */
export class CreateAccount_Reply extends Message<CreateAccount_Reply> {
  /**
   * @generated from field: land.gno.gnomobile.v1.KeyInfo key = 1;
   */
  key?: KeyInfo;

  constructor(data?: PartialMessage<CreateAccount_Reply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnomobile.v1.CreateAccount.Reply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: KeyInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccount_Reply {
    return new CreateAccount_Reply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccount_Reply {
    return new CreateAccount_Reply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccount_Reply {
    return new CreateAccount_Reply().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAccount_Reply | PlainMessage<CreateAccount_Reply> | undefined, b: CreateAccount_Reply | PlainMessage<CreateAccount_Reply> | undefined): boolean {
    return proto3.util.equals(CreateAccount_Reply, a, b);
  }
}

/**
 * @generated from message land.gno.gnomobile.v1.SelectAccount
 */
export class SelectAccount extends Message<SelectAccount> {
  constructor(data?: PartialMessage<SelectAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnomobile.v1.SelectAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectAccount {
    return new SelectAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectAccount {
    return new SelectAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectAccount {
    return new SelectAccount().fromJsonString(jsonString, options);
  }

  static equals(a: SelectAccount | PlainMessage<SelectAccount> | undefined, b: SelectAccount | PlainMessage<SelectAccount> | undefined): boolean {
    return proto3.util.equals(SelectAccount, a, b);
  }
}

/**
 * @generated from message land.gno.gnomobile.v1.SelectAccount.Request
 */
export class SelectAccount_Request extends Message<SelectAccount_Request> {
  /**
   * @generated from field: string nameOrBech32 = 1;
   */
  nameOrBech32 = "";

  constructor(data?: PartialMessage<SelectAccount_Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnomobile.v1.SelectAccount.Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nameOrBech32", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectAccount_Request {
    return new SelectAccount_Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectAccount_Request {
    return new SelectAccount_Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectAccount_Request {
    return new SelectAccount_Request().fromJsonString(jsonString, options);
  }

  static equals(a: SelectAccount_Request | PlainMessage<SelectAccount_Request> | undefined, b: SelectAccount_Request | PlainMessage<SelectAccount_Request> | undefined): boolean {
    return proto3.util.equals(SelectAccount_Request, a, b);
  }
}

/**
 * @generated from message land.gno.gnomobile.v1.SelectAccount.Reply
 */
export class SelectAccount_Reply extends Message<SelectAccount_Reply> {
  /**
   * @generated from field: land.gno.gnomobile.v1.KeyInfo key = 1;
   */
  key?: KeyInfo;

  constructor(data?: PartialMessage<SelectAccount_Reply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnomobile.v1.SelectAccount.Reply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: KeyInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectAccount_Reply {
    return new SelectAccount_Reply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectAccount_Reply {
    return new SelectAccount_Reply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectAccount_Reply {
    return new SelectAccount_Reply().fromJsonString(jsonString, options);
  }

  static equals(a: SelectAccount_Reply | PlainMessage<SelectAccount_Reply> | undefined, b: SelectAccount_Reply | PlainMessage<SelectAccount_Reply> | undefined): boolean {
    return proto3.util.equals(SelectAccount_Reply, a, b);
  }
}

/**
 * @generated from message land.gno.gnomobile.v1.GetActiveAccount
 */
export class GetActiveAccount extends Message<GetActiveAccount> {
  constructor(data?: PartialMessage<GetActiveAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnomobile.v1.GetActiveAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActiveAccount {
    return new GetActiveAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActiveAccount {
    return new GetActiveAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActiveAccount {
    return new GetActiveAccount().fromJsonString(jsonString, options);
  }

  static equals(a: GetActiveAccount | PlainMessage<GetActiveAccount> | undefined, b: GetActiveAccount | PlainMessage<GetActiveAccount> | undefined): boolean {
    return proto3.util.equals(GetActiveAccount, a, b);
  }
}

/**
 * @generated from message land.gno.gnomobile.v1.GetActiveAccount.Request
 */
export class GetActiveAccount_Request extends Message<GetActiveAccount_Request> {
  constructor(data?: PartialMessage<GetActiveAccount_Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnomobile.v1.GetActiveAccount.Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActiveAccount_Request {
    return new GetActiveAccount_Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActiveAccount_Request {
    return new GetActiveAccount_Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActiveAccount_Request {
    return new GetActiveAccount_Request().fromJsonString(jsonString, options);
  }

  static equals(a: GetActiveAccount_Request | PlainMessage<GetActiveAccount_Request> | undefined, b: GetActiveAccount_Request | PlainMessage<GetActiveAccount_Request> | undefined): boolean {
    return proto3.util.equals(GetActiveAccount_Request, a, b);
  }
}

/**
 * @generated from message land.gno.gnomobile.v1.GetActiveAccount.Reply
 */
export class GetActiveAccount_Reply extends Message<GetActiveAccount_Reply> {
  /**
   * @generated from field: land.gno.gnomobile.v1.KeyInfo key = 1;
   */
  key?: KeyInfo;

  constructor(data?: PartialMessage<GetActiveAccount_Reply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnomobile.v1.GetActiveAccount.Reply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: KeyInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActiveAccount_Reply {
    return new GetActiveAccount_Reply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActiveAccount_Reply {
    return new GetActiveAccount_Reply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActiveAccount_Reply {
    return new GetActiveAccount_Reply().fromJsonString(jsonString, options);
  }

  static equals(a: GetActiveAccount_Reply | PlainMessage<GetActiveAccount_Reply> | undefined, b: GetActiveAccount_Reply | PlainMessage<GetActiveAccount_Reply> | undefined): boolean {
    return proto3.util.equals(GetActiveAccount_Reply, a, b);
  }
}

/**
 * @generated from message land.gno.gnomobile.v1.ErrDetails
 */
export class ErrDetails extends Message<ErrDetails> {
  /**
   * @generated from field: repeated land.gno.gnomobile.v1.ErrCode codes = 1;
   */
  codes: ErrCode[] = [];

  constructor(data?: PartialMessage<ErrDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnomobile.v1.ErrDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codes", kind: "enum", T: proto3.getEnumType(ErrCode), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ErrDetails {
    return new ErrDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ErrDetails {
    return new ErrDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ErrDetails {
    return new ErrDetails().fromJsonString(jsonString, options);
  }

  static equals(a: ErrDetails | PlainMessage<ErrDetails> | undefined, b: ErrDetails | PlainMessage<ErrDetails> | undefined): boolean {
    return proto3.util.equals(ErrDetails, a, b);
  }
}

